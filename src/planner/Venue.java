package planner;

/**
 * <p>
 * An immutable class representing a venue in the municipality.
 * </p>
 * 
 * <p>
 * A venue has a name and a capacity. The capacity of the venue is an integer
 * greater than zero that represents the maximum number of people who can attend
 * the venue at the same time for an event. A venue can only host events with a
 * size less than or equal to its capacity.
 * </p>
 * 
 * <p>
 * Hosting an event at a venue generates traffic on some traffic corridors in
 * the municipality.
 * </p>
 * 
 * <p>
 * The amount of traffic that is generated on each corridor is - except for
 * integer truncation - linearly proportional to the size of the event: if an
 * event of maximum size C for the venue would generate traffic X on a corridor,
 * then an event of size K would generate (K*X)/C traffic on that corridor.
 * (Note that the integer division truncates the decimal places of the
 * division.)
 * </p>
 */
public class Venue {

    // REMOVE THIS LINE AND INSERT YOUR INSTANCE VARIABLES HERE

    // REMOVE THIS LINE AND INSERT YOUR CLASS INVARIANT HERE

    /**
     * Creates a new venue with the given name, and capacity, that generates the
     * traffic described by parameter capacityTraffic for an event of size
     * capacity at the venue.
     * 
     * @param name
     *            the name of the venue
     * @param capacity
     *            the capacity of the venue
     * @param capacityTraffic
     *            the traffic generated by hosting an event of size capacity at
     *            the venue
     * 
     * @throws NullPointerException
     *             if either name or capacityTraffic are null
     * @throws IllegalArgumentException
     *             if capacity is less than or equal to zero.
     * @throws InvalidTrafficException
     *             if the traffic on any corridor described by capacityTraffic
     *             is greater than the capacity of the venue (i.e. you can't
     *             generate more traffic for a corridor than you have people at
     *             the venue.)
     */
    public Venue(String name, int capacity, Traffic capacityTraffic) {
        // REMOVE THIS LINE AND WRITE THIS METHOD
    }

    /**
     * Returns the name of the venue.
     * 
     * @return the name of the venue
     */
    public String getName() {
        return null; // REMOVE THIS LINE AND WRITE THIS METHOD
    }

    /**
     * Returns the capacity of the venue.
     * 
     * @return the capacity of the venue
     */
    public int getCapacity() {
        return -1; // REMOVE THIS LINE AND WRITE THIS METHOD
    }

    /**
     * Returns true if the size of the event is less than or equal to the
     * capacity of the venue, and false otherwise.
     * 
     * @param event
     *            the event whose compatibility with this venue will be checked
     * @return true iff the capacity of the venue is greater than or equal to
     *         the size of the event.
     * @throws NullPointerException
     *             if event is null
     */
    public boolean canHost(Event event) {
        return false; // REMOVE THIS LINE AND WRITE THIS METHOD
    }

    /**
     * <p>
     * Returns the amount of traffic that would be generated by hosting the
     * given event at this venue.
     * </p>
     * 
     * <p>
     * For each corridor c, the traffic generated by the event on that corridor
     * is defined to be the integer ((K * X) / C), where K is the size of the
     * event, C is the capacity of this venue and X is the traffic generated by
     * an event of size C at this venue on corridor c.
     * </p>
     * 
     * <p>
     * (This definition means that the amount of traffic that is generated on
     * each corridor is - except for the integer truncation - linearly
     * proportional to the size of the event.)
     * </p>
     * 
     * @param event
     *            the event for which the traffic will be generated
     * @return the traffic generated by hosting the given event at this venue
     * @throws NullPointerException
     *             if event is null
     * @throws IllegalArgumentException
     *             if the size of the event exceeds the capacity of the venue
     */
    public Traffic getTraffic(Event event) {
        return null; // REMOVE THIS LINE AND WRITE THIS METHOD
    }

    /**
     * The string representation of a venue is a string of the form <br>
     * <br>
     * 
     * "NAME (CAPACITY)" + LINE_SEPARATOR + "CAPACITYTRAFFIC"<br>
     * <br>
     * 
     * where NAME is the name of the venue, CAPACITY is the capacity of the
     * venue, LINE_SEPARATOR is the line separator retrieved in a
     * machine-independent way by calling System.getProperty("line.separator"),
     * and CAPACITYTRAFFIC is the toString() representation of the Traffic
     * object describing the traffic generated by hosting an event of size
     * capacity at the venue.
     */
    @Override
    public String toString() {
        return null; // REMOVE THIS LINE AND WRITE THIS METHOD
    }

    /**
     * Returns true if and only if the given object
     * 
     * (i) is an instance of the class Venue
     * 
     * (ii) with a name that is equal to this venue's name (according to the
     * equals method of the String class),
     * 
     * (iii) a capacity that is equal to this venue's capacity and
     * 
     * (iv) generates the same traffic as this venue for an event of maximum
     * size (capacity) at the venue. (The amount of traffic generated is the
     * same if it is the same according to the sameTraffic() method of the
     * Traffic class).
     * 
     */
    @Override
    public boolean equals(Object object) {
        return super.equals(object); // REMOVE THIS LINE AND WRITE THIS METHOD
    }

    @Override
    public int hashCode() {
        return super.hashCode(); // REMOVE THIS LINE AND WRITE THIS METHOD
    }

    /**
     * <p>
     * Determines whether this class is internally consistent (i.e. it satisfies
     * its class invariant).
     * </p>
     * 
     * <p>
     * NOTE: This method is only intended for testing purposes.
     * </p>
     * 
     * @return true if this class is internally consistent, and false otherwise.
     */
    public boolean checkInvariant() {
        return false; // REMOVE THIS LINE AND WRITE THIS METHOD
    }

}
